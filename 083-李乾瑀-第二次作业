pragma solidity ^0.4.24;

contract Payroll {
    struct Employee {
        address id;
        uint salary;
        uint lastPayday;
    }

    function _partialPaid(Employee employee) private {
        uint payment = employee.salary * (now - employee.lastPayday) / payDuration;
        employee.id.transfer(payment);
    }
    
    function _findEmployee(address employeeId) private returns (Employee, uint) {
        for (uint i = 0; i < employees.length; i++) {
            if (employees[i].id == employeeId) {
                return (employees[i], i);
            }
        }
    }
    
    
    
    address sugarDaddy = msg.sender;  //Yeah your SugarDaddy is the PO
    Employee[] employees;
    
    address employee;
    uint constant payDuration = 10 seconds;
    
    function addEmployee(address employeeId, uint salary) {
        require(msg.sender == sugarDaddy);
        var (employee, index) = _findEmployee(employeeId);
        assert(employee.id == 0x0);
        
        employees.push(Employee(employeeId, salary, now));
    }

    function removeEmployee(address employeeId) {
        require(msg.sender == sugarDaddy);
        var (employee, index) = _findEmployee(employeeId);
        assert(employee.id != 0x0);
        
        _partialPaid(employee);
        delete employees[index];
        employees[index] = employees[employees.length - 1];
        employees.length -= 1;
        
    }
    
    //Your sugarDaddy is the King, beg for money is the rule baby.
    function updateEmployee(address employeeId, uint salary) {
        require(msg.sender == sugarDaddy);
        var (employee, index) = _findEmployee(employeeId);
        assert(employee.id != 0x0);
        
        _partialPaid(employee);
        employees[index].salary = salary;
        employees[index].lastPayday = now;
        

    }
    
    function addFund() payable returns (uint){
        return this.balance;
    }
    
    function calculateRunway() returns (uint) {
        uint totalSalary = 0;
        for (uint i = 0; i < employees.length; i++) {
            totalSalary += employees[i].salary;
        }
        
        return this.balance / totalSalary;
    }
    
    //It's your Daddy's buying power!
    function hasEnoughFound() returns (bool) {
        return calculateRunway() > 0;
    }
    
    function getPaid() {
        var (employee, index) = _findEmployee(msg.sender);
        assert(employee.id != 0x0);
        
        uint nextPayDay = employee.lastPayday + payDuration;
        assert(nextPayDay < now);
        
        employees[index].lastPayday = nextPayDay;
        employee.id.transfer(employee.salary);
    }
    
    //function test () {
    //    payDuration =1 days;
    //}
    
    function test() returns (bool) {
        return 1 wei == 1;
    }
}
